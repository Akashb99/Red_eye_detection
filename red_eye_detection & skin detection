# -*- coding: utf-8 -*-
"""M22AI509_Q1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PerPgCU6FYBGl0d8I8T423fIgqeTtB9p
"""
#Eye detection

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

# Load the image
image = cv2.imread('/content/gagarin_2.jpg')
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply Gaussian blur to reduce noise
blurred_image = cv2.GaussianBlur(gray_image, (5, 5), 0)

# Define ROI for eye detection
roi_top = int(image.shape[0] * 0.3)
roi_bottom = int(image.shape[0] * 0.5)
roi_left = int(image.shape[1] * 0.2)
roi_right = int(image.shape[1] * 0.8)
roi = blurred_image[roi_top:roi_bottom, roi_left:roi_right]

# Apply Hough Transform for circles with refined parameters
circles = cv2.HoughCircles(
    roi, cv2.HOUGH_GRADIENT, dp=1, minDist=30, param1=50, param2=15, minRadius=5, maxRadius=20
)

# Convert circle coordinates to global coordinates and draw them on the original image
if circles is not None:
    circles = np.uint16(np.around(circles))
    for circle in circles[0, :]:
        center = (circle[0] + roi_left, circle[1] + roi_top)
        radius = circle[2]

        # Draw the circle on the original image
        cv2.circle(image, center, radius, (0, 255, 0), 2)

# Display the result
cv2_imshow(image)
cv2.waitKey(0)
cv2.destroyAllWindows()

# -*- coding: utf-8 -*-
"""m22ai509_q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tm2KxnVnvUc0IDIhezkWnb8jgJWr9Vor
"""
#Skin detection
pip install cv2_plt_imshow

from google.colab.patches import cv2_imshow
import cv2
import numpy as np

def detect_skin(img_path):
    # Load the image from the specified path
    img = cv2.imread(img_path)

    # Change the color space of the image to YCrCb
    color_space = cv2.cvtColor(img, cv2.COLOR_BGR2YCrCb)

    # Set the lower and upper color bounds for skin in YCrCb
    lower_skin_color = np.array([0, 133, 77], dtype=np.uint8)
    upper_skin_color = np.array([255, 173, 127], dtype=np.uint8)

    # Generate a binary mask where skin pixels are white and others are black
    mask_skin = cv2.inRange(color_space, lower_skin_color, upper_skin_color)

    # Reduce noise in the mask using Gaussian blur
    mask_skin = cv2.GaussianBlur(mask_skin, (3, 3), 0)

    # Use bitwise-AND operation with the mask and original image to highlight skin areas
    skin_highlighted = cv2.bitwise_and(img, img, mask=mask_skin)

    return skin_highlighted

# Specify the path to the input image
img_path = '/content/gagarin_2.jpg'

# Apply the skin detection function and store the result
result_skin = detect_skin(img_path)

# Load the original image for resizing and comparison
original_img = cv2.imread(img_path)
# Resize the original image to desired dimensions
resized_original_img = cv2.resize(original_img, (420,600))
# Resize the result image to match the original image's dimensions
resized_result_img = cv2.resize(result_skin, (420,600))

# Display the resized original image
cv2_imshow(resized_original_img)
# Display the result of skin detection on resized image
cv2_imshow(resized_result_img)
